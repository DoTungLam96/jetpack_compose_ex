package com.example.jc_example_1.storage

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import javax.inject.Inject

val Context.dataStore by preferencesDataStore(name = "app_prefs")

class DTaStoreManager  @Inject constructor(  private val dataStore: DataStore<Preferences>) {
    // ðŸ›  Kiá»ƒm tra key cÃ³ tá»“n táº¡i khÃ´ng (an toÃ n hÆ¡n)
    suspend fun containsKey(key: Preferences.Key<*>): Boolean {
        return dataStore.data.map { it.contains(key) }.first()
    }

    // âœ… LÆ°u danh sÃ¡ch String dÆ°á»›i dáº¡ng Set<String>
    suspend fun putStringList(key: Preferences.Key<Set<String>>, value: List<String>) {
        dataStore.edit { prefs ->
            prefs[key] = value.toSet()
        }
    }

    // âœ… Láº¥y danh sÃ¡ch String
    fun getStringList(key: Preferences.Key<Set<String>>): Flow<List<String>> {
        return dataStore.data.map { prefs ->
            prefs[key]?.toList() ?: emptyList()
        }
    }

    // âœ… LÆ°u Boolean
    suspend fun putBool(key: Preferences.Key<Boolean>, value: Boolean) {
        dataStore.edit { prefs ->
            prefs[key] = value
        }
    }

    // âœ… Láº¥y Boolean (thÃªm giÃ¡ trá»‹ máº·c Ä‘á»‹nh)
    fun getBool(key: Preferences.Key<Boolean>, defaultValue: Boolean = false): Flow<Boolean> {
        return dataStore.data.map { prefs ->
            prefs[key] ?: defaultValue
        }
    }

    // âœ… LÆ°u String
    suspend fun putString(key: Preferences.Key<String>, value: String) {
        dataStore.edit { prefs ->
            prefs[key] = value
        }
    }

    // âœ… Láº¥y String (thÃªm giÃ¡ trá»‹ máº·c Ä‘á»‹nh)
    fun getString(key: Preferences.Key<String>, defaultValue: String = ""): Flow<String> {
        return dataStore.data.map { prefs ->
            prefs[key] ?: defaultValue
        }
    }

    // âœ… LÆ°u Int
    suspend fun putInt(key: Preferences.Key<Int>, value: Int) {
        dataStore.edit { prefs ->
            prefs[key] = value
        }
    }

    // âœ… Láº¥y Int (thÃªm giÃ¡ trá»‹ máº·c Ä‘á»‹nh)
    fun getInt(key: Preferences.Key<Int>, defaultValue: Int = 0): Flow<Int> {
        return dataStore.data.map { prefs ->
            prefs[key] ?: defaultValue
        }
    }

    // âœ… XÃ³a toÃ n bá»™ dá»¯ liá»‡u
    suspend fun clear() {
        dataStore.edit { it.clear() }
    }

    // âœ… XÃ³a má»™t key cá»¥ thá»ƒ
    suspend fun remove(key: Preferences.Key<*>) {
        dataStore.edit { prefs ->
            prefs.remove(key)
        }
    }

}